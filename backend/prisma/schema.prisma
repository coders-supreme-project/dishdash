generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")  // âœ… Correct way to reference environment variables
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  role         Role
  phoneNumber  String?
  createdAt    DateTime @default(now())
  balance      Float    @default(0)
  updatedAt    DateTime @default(now()) @updatedAt

  // Relations
  customer        Customer?
  restaurantOwner RestaurantOwner?
  driver          Driver?
  media           Media[]
}

model Customer {
  id              Int    @id @default(autoincrement())
  firstName       String
  lastName        String
  deliveryAddress String
  userId          Int    @unique

  // Relations
  user          User           @relation(fields: [userId], references: [id])
  orders        Order[]
  geoLocations  GeoLocation[]
  conversations Conversation[]
  media         Media[]
}

model Restaurant {
  id               Int       @id @default(autoincrement())
  name             String    @db.VarChar(255)
  image            String?   
  address          String
  cuisineType      String
  contactNumber    String
  openingH         DateTime
  closingH         DateTime
  rating           Float     @default(0)
  restaurantOwnerId Int
  restaurantRcId String      @unique


  // Relations
  restaurantOwner RestaurantOwner @relation(fields: [restaurantOwnerId], references: [id])
  menuItems       MenuItem[]
  orders          Order[]
  geoLocation     GeoLocation[] // Change this to a one-to-many relationship
  media           Media[]
}

model RestaurantOwner {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  userId    Int    @unique

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  restaurants Restaurant[]
}

model Driver {
  id            Int     @id @default(autoincrement())
  userId        Int     @unique
  firstName     String
  lastName      String
  vehicleType   String
  licenseNumber String
  balance       Decimal @default(0.00)

  // Relationships
  user          User           @relation(fields: [userId], references: [id])
  orders        Order[]
  geoLocations  GeoLocation[]
  conversations Conversation[]
  media         Media[]
}

model Order {
  id              Int           @id @default(autoincrement())
  customerId      Int
  restaurantId    Int
  driverId        Int?
  totalAmount     Decimal
  status          OrderStatus
  paymentStatus   PaymentStatus
  deliveryAddress String
  createdAt       DateTime      @default(now())
  customer        Customer      @relation(fields: [customerId], references: [id])
  restaurant      Restaurant    @relation(fields: [restaurantId], references: [id])
  driver          Driver?       @relation(fields: [driverId], references: [id])
  orderItems      OrderItem[]
  payment         Payment[]
}

model Payment {
  id              Int           @id @default(autoincrement())
  orderId         Int
  amount          Decimal
  paymentIntentId String       @unique
  status          PaymentStatus
  paymentMethod   String
  currency        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id])
}

model OrderItem {
  id                 Int   @id @default(autoincrement())
  orderId            Int
  menuItemId         Int
  quantity           Int
  priceAtTimeOfOrder Float

  // Relationships
  order    Order    @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
  media    Media[]
}

model MenuItem {
  id           Int     @id @default(autoincrement())
  restaurantId Int
  categoryId  Int?
  name        String
  description String?   
  price       Decimal     @db.Decimal(10, 2)
  imageUrl    String?   
  isAvailable Boolean  @default(true)

  // Relationships
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems OrderItem[]
  category   Category?   @relation(fields: [categoryId], references: [id]) // Optional relation to Category

  // Subcategories
  subcategories Subcategory[] // A MenuItem has many Subcategories
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relationships
  menuItems     MenuItem[]
  subcategories Subcategory[] // A Category can have many Subcategories
}

model GeoLocation {
  id           Int   @id @default(autoincrement())
  latitude     Float
  longitude    Float
  customerId   Int?
  restaurantId Int?
  driverId     Int?

  // Relationships
  customer   Customer?   @relation(fields: [customerId], references: [id])
  restaurant Restaurant? @relation(fields: [restaurantId], references: [id])
  driver     Driver?     @relation(fields: [driverId], references: [id])
}

model Media {
  id           Int      @id @default(autoincrement())
  imageUrl     String? 
  reviewText   String? 
  rating       Float?  
  createdAt    DateTime @default(now()) 

 
  userId       Int?     
  restaurantId Int?     
  driverId     Int?     
  customerId   Int?     
  orderItemId  Int?    

  // Relationships
  user         User?     @relation(fields: [userId], references: [id])
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  driver       Driver?   @relation(fields: [driverId], references: [id]) 
  customer     Customer? @relation(fields: [customerId], references: [id]) 
  orderItem    OrderItem? @relation(fields: [orderItemId], references: [id]) 
}

model Conversation {
  id         Int @id @default(autoincrement())
  customerId Int
  driverId   Int

  // Relationships
  customer Customer  @relation(fields: [customerId], references: [id])
  driver   Driver    @relation(fields: [driverId], references: [id])
  messages Message[]
}

model Message {
  id             Int        @id @default(autoincrement())
  conversationId Int
  senderType     SenderType
  content        String
  createdAt      DateTime   @default(now())

  // Relationships
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

enum Role {
  customer
  restaurantOwner
  meta
  driver
  admin
}

enum SenderType {
  customer
  driver
}

enum OrderStatus {
  pending
  confirmed
  prepared
  out_for_delivery
  delivered
}

enum PaymentStatus {
  pending
  completed
  failed
}

model Subcategory {
  id          Int     @id @default(autoincrement())
  menuItemId  Int // Foreign key for MenuItem
  categoryId  Int? // Optional reference to Category
  name        String
  description String?
  price       Float
  imageUrl    String?
  isAvailable Boolean @default(true)

  // Relationships
  menuItem MenuItem  @relation(fields: [menuItemId], references: [id]) // Correctly reference MenuItem
  category Category? @relation(fields: [categoryId], references: [id]) // Correctly reference Category with optional relation
}
